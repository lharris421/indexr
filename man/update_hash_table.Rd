% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/update_hash_table.R
\name{update_hash_table}
\alias{update_hash_table}
\title{Update File Names Based on New Parameters in Adjusted Hash Table}
\usage{
update_hash_table(
  hash_table,
  rds_folder,
  hash_includes_timestamp = FALSE,
  ignore_na = TRUE,
  alphabetical_order = TRUE,
  algo = "xxhash64"
)
}
\arguments{
\item{hash_table}{A file path to a modified hash table generated by \code{create_hash_table}.}

\item{rds_folder}{A string specifying the directory containing the RDS files associated with the hash table.}

\item{hash_includes_timestamp}{Logical; if TRUE, timestamps are included in the hash generation.}

\item{ignore_na}{Logical; if TRUE, NA values are ignored during hash generation.}

\item{alphabetical_order}{Logical; if TRUE, parameters are sorted alphabetically before hash generation.}

\item{algo}{Character string specifying the hashing algorithm to use. Default is \code{"xxhash64"}. See \code{?digest}}
}
\value{
The function does not return a value but saves updated RDS files and deletes old files as needed.
}
\description{
This function updates names of existing results by re-hashing each set of
parameters with potentially updated values based on adjustments made to a
hash table (see \code{?create_hash_table}) by user. It loads RDS files based
on their existing hashes, compares to the corresponding entry in a hash table,
generates new hashes where needed, and saves the files with the new hashes.
The old files are deleted if their hashes differ from the new ones.
}
\examples{
\dontrun{
# Path to the existing hash table CSV
hash_hash_table <- "path/to/hash_table.csv"
# Directory containing the associated RDS files
rds_directory <- "path/to/rds_files"
update_hash_table(hash_hash_table, rds_directory)
}
}
